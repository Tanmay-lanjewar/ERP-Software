import React, { useState } from "react";
import {
  Box,
  Typography,
  Button,
  Grid,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Tabs,
  Tab,
  IconButton,
  Menu,
  MenuItem,
  Chip,
  Pagination,
  Checkbox,
  TextField,
  Avatar,
  Paper,
  InputBase,
} from "@mui/material";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import Sidebar from "./Sidebar";
import AddIcon from "@mui/icons-material/Add";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { useNavigate } from "react-router-dom";
import SearchIcon from "@mui/icons-material/Search";
import NotificationsNoneIcon from "@mui/icons-material/NotificationsNone";
import jsPDF from "jspdf";
import autoTable from 'jspdf-autotable';
import axios from 'axios';
import UserMenu from './UserMenu';


export default function QuotationListPage() {
  const navigator = useNavigate();
  const [tab, setTab] = useState(0);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedQuote, setSelectedQuote] = useState(null);
  const [quotations, setQuotations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  React.useEffect(() => {
    const fetchQuotations = async () => {
      setLoading(true);
      setError('');
      try {
        const res = await axios.get('http://localhost:5000/api/quotation');
        setQuotations(res.data);
      } catch (err) {
        setError('Failed to fetch quotations');
      } finally {
        setLoading(false);
      }
    };
    fetchQuotations();
  }, []);

  
// Download PDF
const handleDownloadPdf = async () => {
  if (!selectedQuote) return;
  try {
    const res = await axios.get(`http://localhost:5000/api/quotation/${selectedQuote.quotation_id}`);
    const { quotation, items, sub_total, cgst, sgst, grand_total } = res.data;
    const doc = new jsPDF();
    // Company logo (placeholder)
    const logoUrl = 'https://via.placeholder.com/80x40?text=LOGO';
    const img = new Image();
    img.src = logoUrl;
    // Draw logo (async)
    await new Promise(resolve => { img.onload = resolve; });
    doc.addImage(img, 'PNG', 20, 10, 40, 20);
    // Company info
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Your Company Name', 105, 18, null, null, 'center');
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('123 Main Street, City, Country', 105, 24, null, null, 'center');
    doc.text('Phone: +91-1234567890 | Email: info@company.com', 105, 29, null, null, 'center');
    // Quotation header
    let y = 38;
    doc.setFontSize(13);
    doc.setFont('helvetica', 'bold');
    doc.text('QUOTATION', 105, y, null, null, 'center');
    y += 6;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Quotation #: ${quotation.quote_number || ''}`, 20, y);
    doc.text(`Date: ${quotation.quotation_date || ''}`, 150, y);
    y += 6;
    doc.text(`Expiry: ${quotation.expiry_date || ''}`, 20, y);
    doc.text(`Status: ${quotation.status || ''}`, 150, y);
    y += 8;
    doc.setFont('helvetica', 'bold');
    doc.text('Bill To:', 20, y);
    doc.setFont('helvetica', 'normal');
    doc.text(quotation.customer_name || '', 40, y);
    y += 8;
    // Items Table
    autoTable(doc, {
      startY: y,
      head: [["Item", "Qty", "Rate", "Discount", "Amount"]],
      body: items.map(item => [
        item.item_detail || '',
        item.quantity || '',
        item.rate || '',
        item.discount || '',
        item.amount || ''
      ]),
      theme: 'grid',
      headStyles: { fillColor: [0, 51, 102], textColor: 255, fontStyle: 'bold', halign: 'center' },
      bodyStyles: { halign: 'right' },
      columnStyles: {
        0: { halign: 'left' },
        1: { halign: 'right' },
        2: { halign: 'right' },
        3: { halign: 'right' },
        4: { halign: 'right' },
      },
      styles: { fontSize: 10 },
      margin: { left: 20, right: 20 },
    });
    let finalY = doc.lastAutoTable.finalY + 6;
    // Totals
    doc.setFont('helvetica', 'bold');
    doc.text(`Sub Total: ₹${sub_total || 0}`, 150, finalY);
    finalY += 6;
    doc.text(`CGST (9%): ₹${cgst || 0}`, 150, finalY);
    finalY += 6;
    doc.text(`SGST (9%): ₹${sgst || 0}`, 150, finalY);
    finalY += 6;
    doc.text(`Grand Total: ₹${grand_total || 0}`, 150, finalY);
    // Footer
    doc.setFontSize(9);
    doc.setFont('helvetica', 'italic');
    doc.text('Generated by ERP Software', 105, 285, null, null, 'center');
    doc.save(`${quotation.quote_number || 'quotation'}.pdf`);
  } catch (err) {
    alert('Failed to generate PDF');
  }
};

// Print Quotation
// ... existing code ...
  // Format address helper function
  const formatAddress = (customerData) => {
    if (!customerData) return '';
    const parts = [
      customerData.billing_address1,
      customerData.billing_address2,
      customerData.billing_city,
      customerData.billing_state,
      customerData.billing_pincode
    ].filter(Boolean);
    return parts.join(', ');
  };

  const handlePrintQuotation = async (quotationId) => {
    try {
      setLoading(true);
      
      // Fetch quotation data
      const quotationResponse = await axios.get(`http://localhost:5000/api/quotation/${quotationId}`);
      if (!quotationResponse.data || !quotationResponse.data.quotation) {
        throw new Error("Failed to fetch quotation data");
      }
      
      const quotation = quotationResponse.data.quotation;
      const items = quotationResponse.data.items || [];
      
      // Fetch customer data
      let customerData = {};
      if (quotation.customer_id) {
        try {
          const customerResponse = await axios.get(`http://localhost:5000/api/customers/${quotation.customer_id}`);
          if (customerResponse.data) {
            customerData = customerResponse.data;
          }
        } catch (customerError) {
          console.error("Error fetching customer data:", customerError);
        }
      }
      
      // Format date
      const formattedDate = quotation.quotation_date ? new Date(quotation.quotation_date).toLocaleDateString('en-GB') : '';
      
      // Format address
      const formattedAddress = formatAddress(customerData);
      
      // Separate items into supply and installation
      const installationItems = (items || []).filter(item => 
        item.item_detail && item.item_detail.toLowerCase().includes('installation')
      );
      const supplyItems = (items || []).filter(item => 
        !item.item_detail || !item.item_detail.toLowerCase().includes('installation')
      );
      
      // Calculate totals safely
      const supplySubTotal = supplyItems.reduce((sum, item) => sum + parseFloat(item.amount || 0), 0);
      const supplyGST = parseFloat((supplySubTotal * 0.18).toFixed(2));
      const supplyGrandTotal = parseFloat((supplySubTotal + supplyGST).toFixed(2));
      
      const installationSubTotal = installationItems.reduce((sum, item) => sum + parseFloat(item.amount || 0), 0);
      const installationGST = parseFloat((installationSubTotal * 0.18).toFixed(2));
      const installationGrandTotal = parseFloat((installationSubTotal + installationGST).toFixed(2));
      
      // Create print window with React component
      const printWindow = window.open("", "_blank");
      if (!printWindow) {
        throw new Error("Failed to open print window. Please check if pop-ups are blocked.");
      }

      // Quotation reference (fallback to sample if not present)
      const quotationRef = (
        quotation.quotation_ref_no ||
        quotation.reference_no ||
        quotation.quotation_no ||
        quotation.quotationId ||
        'ME/BESPL/1057/2025-26'
      );

      // Create the refined print content to match Quotation 2
      const printContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <title>Quotation Print</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
              }
              
              body {
                font-family: 'Roboto', 'Arial', sans-serif;
                font-size: 12px;
                line-height: 1.4;
                color: #000;
                background: white;
                -webkit-print-color-adjust: exact; /* Ensures background colors and images are printed */
              }
              
              .print-container {
                max-width: 210mm; /* A4 width */
                margin: 0 auto;
                padding: 15px; /* Adjusted padding for better fit */
                background: white;
                border: 1px solid #ccc; /* Optional: for visual debugging */
              }
              
              /* Header layout matching Quotation 2 */
              .header-section { margin-bottom: 10px; }
              .header-grid {
                display: grid;
                grid-template-columns: 1fr auto; /* Adjusted for logo on left, ref on right */
                align-items: start; /* Align items to the start of the grid area */
                gap: 10px;
              }
              .logo-company-info {
                display: flex;
                align-items: center;
                gap: 8px;
              }
              .company-logo-img {
                width: 40px; /* Adjusted size for the logo */
                height: 40px;
                object-fit: contain;
              }
              .company-title-wrap {
                display: flex;
                flex-direction: column;
              }
              .company-title {
                font-size: 20px; /* Slightly smaller to fit */
                font-weight: 800;
                color: #0d47a1;
                letter-spacing: 0.5px;
              }
              .company-tagline {
                font-size: 10px; /* Adjusted size */
                font-style: italic;
                color: #333;
                text-align: left; /* Aligned to left */
                margin-top: 0px;
              }
              .ref-box {
                border: 1px solid #000;
                padding: 8px 10px; /* Adjusted padding */
                font-size: 11px;
                width: 180px; /* Fixed width for consistency */
              }
              .ref-row { 
                display: flex; 
                justify-content: space-between; 
                margin-bottom: 3px; /* Spacing between rows */
              }
              .ref-row:last-child { margin-bottom: 0; }
              .ref-label { 
                font-weight: 700; 
                margin-right: 5px; 
                white-space: nowrap; /* Prevent wrapping */
              }
              .ref-value {
                text-align: right;
                flex-grow: 1;
              }
              
              .gst-info-bar {
                border-top: 1px solid #000;
                border-bottom: 1px solid #000;
                padding: 6px 0; /* Adjusted padding */
                font-size: 10.5px;
                text-align: center;
                margin-top: 8px; /* Adjusted margin */
                margin-bottom: 8px; /* Adjusted margin */
              }
              
              .address-info {
                font-size: 10.5px;
                color: #000;
                line-height: 1.35;
                text-align: center;
                margin-bottom: 12px; /* Adjusted margin */
              }
              
              .info-grid {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 15px; /* Adjusted margin */
              }
              
              .info-grid td {
                border: 1px solid #000;
                padding: 6px 8px; /* Adjusted padding */
                font-size: 11px;
                vertical-align: top;
              }
              
              .label-cell { 
                font-weight: 700; 
                width: 20%; /* Adjusted width for labels */
                background: #fafafa; 
              }
              .value-cell {
                width: 30%; /* Adjusted width for values */
              }
              .date-label { 
                font-weight: 700; 
                width: 20%; /* Adjusted width for labels */
                background: #fafafa; 
              }
              
              .section-title {
                text-align: center;
                font-size: 14px;
                font-weight: 700;
                margin: 15px 0 10px 0; /* Adjusted margins */
                text-decoration: underline;
              }
              
              .subsection-title { 
                font-size: 12px; 
                font-weight: 700; 
                margin: 10px 0 6px 0; /* Adjusted margins */
              }
              
              .items-table {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 15px; /* Adjusted margin */
              }
              
              .items-table thead th {
                background: #e6e6e6;
                color: #000;
                border: 1px solid #000;
                padding: 7px 5px; /* Adjusted padding */
                text-align: center;
                font-weight: 700;
                font-size: 11px;
              }
              
              .items-table td {
                border: 1px solid #000;
                padding: 6px 5px; /* Adjusted padding */
                font-size: 11px;
                vertical-align: top;
              }
              
              .items-table .sr-no { width: 6%; text-align: center; }
              .items-table .description { width: 48%; text-align: left; } /* Adjusted width */
              .items-table .qty { width: 10%; text-align: center; }
              .items-table .uom { width: 10%; text-align: center; }
              .items-table .rate { width: 13%; text-align: right; } /* Adjusted width */
              .items-table .total { width: 13%; text-align: right; } /* Adjusted width */

              .totals-table {
                margin-left: auto;
                border-collapse: collapse;
                margin-bottom: 15px; /* Adjusted margin */
                width: 280px; /* Fixed width for totals table */
              }
              
              .totals-table td {
                border: 1px solid #000;
                padding: 5px 8px; /* Adjusted padding */
                font-size: 11px;
              }
              
              .totals-table .label {
                font-weight: bold;
                background: #fafafa;
                width: 60%; /* Adjusted width */
              }
              
              .totals-table .currency {
                text-align: center;
                width: 10%;
              }
              
              .totals-table .amount {
                text-align: right;
                width: 30%; /* Adjusted width */
              }
              
              .totals-table .grand-total {
                font-weight: bold;
                background: #eaf7ea;
              }
              
              .terms-section {
                margin-top: 20px; /* Adjusted margin */
              }
              
              .terms-title { 
                text-align: center; 
                font-weight: 700; 
                font-size: 12px; 
                text-decoration: underline; 
                margin-bottom: 8px; /* Adjusted margin */
              }
              
              .terms-table {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 15px; /* Adjusted margin */
              }
              
              .terms-table td {
                border: 1px solid #000;
                padding: 6px 8px; /* Adjusted padding */
                font-size: 11px;
                vertical-align: top;
              }
              
              .terms-table .term-label {
                font-weight: bold;
                background: #fafafa;
                width: 25%;
              }
              
              .footer-section {
                margin-top: 20px; /* Adjusted margin */
                text-align: right;
              }
              
              .footer-section p {
                margin: 4px 0; /* Adjusted margin */
                font-size: 12px;
              }
              
              .contact-footer {
                margin-top: 25px; /* Adjusted margin */
                text-align: center;
                border-top: 1px solid #000;
                padding-top: 10px; /* Adjusted padding */
                font-size: 10px;
                color: #333;
              }
              
              @media print {
                body { margin: 0; }
                .print-container { 
                  margin: 0; 
                  padding: 10px; 
                  border: none; /* Remove border for actual print */
                }
              }
            </style>
          </head>
          <body>
            <div class="print-container">
              <!-- Header Section: left logo, center title, right ref/date -->
              <div class="header-section">
                <div class="header-grid">
                  <div class="logo-company-info">
                    <img src="/pdf.png" alt="Company Logo" class="company-logo-img" />
                    <div class="company-title-wrap">
                      <div class="company-title">MERRAKI EXPERT</div>
                      <div class="company-tagline">A Cool Reality...</div>
                    </div>
                  </div>
                  <div class="ref-box">
                    <div class="ref-row"><span class="ref-label">Quotation Ref. No.</span><span class="ref-value">${quotationRef}</span></div>
                    <div class="ref-row"><span class="ref-label">Date</span><span class="ref-value">${formattedDate || ''}</span></div>
                  </div>
                </div>
                <div class="gst-info-bar">GSTIN: 27AKUPY6544R1ZM ; UDYAM-MH-20-0114278 ; ISO 9001-2015</div>
                <div class="address-info">101, 2nd Floor, Shree Sai Apartment, Near Kachore Lawn, Manish Nagar, Nagpur - 440015 (MH)</div>
              </div>

              <!-- Customer Info Grid -->
              <table class="info-grid">
                <tr>
                  <td class="label-cell">Company</td>
                  <td class="value-cell">${customerData?.customer_name || ''}</td>
                  <td class="date-label">Contact No.</td>
                  <td class="value-cell">${customerData?.phone || ''}</td>
                </tr>
                <tr>
                  <td class="label-cell">Contact Person</td>
                  <td class="value-cell">${customerData?.contact_person || ''}</td>
                  <td class="date-label">Meraki Expert</td>
                  <td class="value-cell">7722005969</td>
                </tr>
                <tr>
                  <td class="label-cell">Location</td>
                  <td class="value-cell">${formattedAddress}</td>
                  <td class="date-label">Email</td>
                  <td class="value-cell">niraj.k@merrakiexpert.in</td>
                </tr>
                <tr>
                  <td class="label-cell">Email</td>
                  <td class="value-cell">${customerData?.email || ''}</td>
                  <td class="date-label"></td>
                  <td class="value-cell"></td>
                </tr>
              </table>

              <!-- Main Title -->
              <div class="section-title">Quotation - Supply & Installation of PUR Panel.</div>

              <!-- Supply Section -->
              <div class="subsection-title">PUR Panel with accessories</div>
              <table class="items-table">
                <thead>
                  <tr>
                    <th class="sr-no">Sr. No.</th>
                    <th class="description">Description</th>
                    <th class="qty">Qty.</th>
                    <th class="uom">UOM</th>
                    <th class="rate">Rate</th>
                    <th class="total">Total</th>
                  </tr>
                </thead>
                <tbody>
                  ${supplyItems.length > 0 ? supplyItems.map((item, idx) => `
                    <tr>
                      <td class="sr-no">${idx + 1}</td>
                      <td class="description">${item.item_detail || ''}</td>
                      <td class="qty">${item.quantity ?? ''}</td>
                      <td class="uom">${item.uom || ''}</td>
                      <td class="rate">${(item.rate ?? '').toString()}</td>
                      <td class="total">${(item.amount ?? '').toString()}</td>
                    </tr>
                  `).join('') : '<tr><td colspan="6" class="center">No supply items found</td></tr>'}
                </tbody>
              </table>

              <!-- Supply Totals -->
              <table class="totals-table">
                <tr>
                  <td class="label">Total Basic</td>
                  <td class="center">₹</td>
                  <td class="amount">${supplySubTotal.toFixed(2)}</td>
                </tr>
                <tr>
                  <td class="label">GST @ 18%</td>
                  <td class="center">₹</td>
                  <td class="amount">${supplyGST.toFixed(2)}</td>
                </tr>
                <tr>
                  <td class="label">Freight</td>
                  <td class="center">₹</td>
                  <td class="amount">Extra At Actual</td>
                </tr>
                <tr class="grand-total">
                  <td class="label">Grand Total</td>
                  <td class="center">₹</td>
                  <td class="amount">${supplyGrandTotal.toFixed(2)}</td>
                </tr>
              </table>

              <!-- Installation Section -->
              <div class="subsection-title">Installation labour Charges for PUR Panels with accessories.</div>
              <table class="items-table">
                <thead>
                  <tr>
                    <th class="sr-no">Sr. No.</th>
                    <th class="description">Description</th>
                    <th class="qty">Qty.</th>
                    <th class="uom">UOM</th>
                    <th class="rate">Rate</th>
                    <th class="total">Total</th>
                  </tr>
                </thead>
                <tbody>
                  ${installationItems.length > 0 ? installationItems.map((item, idx) => `
                    <tr>
                      <td class="center">${idx + 1}</td>
                      <td>${item.item_detail || ''}</td>
                      <td class="center">${item.quantity ?? ''}</td>
                      <td class="center">${item.uom || ''}</td>
                      <td class="right">${(item.rate ?? '').toString()}</td>
                      <td class="right">${(item.amount ?? '').toString()}</td>
                    </tr>
                  `).join('') : '<tr><td colspan="6" class="center">No installation items found</td></tr>'}
                </tbody>
              </table>

              <!-- Installation Totals -->
              <table class="totals-table">
                <tr>
                  <td class="label">Total Basic</td>
                  <td class="center">₹</td>
                  <td class="amount">${installationSubTotal.toFixed(2)}</td>
                </tr>
                <tr>
                  <td class="label">GST @ 18%</td>
                  <td class="center">₹</td>
                  <td class="amount">${installationGST.toFixed(2)}</td>
                </tr>
                <tr class="grand-total">
                  <td class="label">Grand Total</td>
                  <td class="center">₹</td>
                  <td class="amount">${installationGrandTotal.toFixed(2)}</td>
                </tr>
              </table>

              <!-- Commercial Terms & Conditions -->
              <div class="terms-section">
                <div class="terms-title">COMMERCIAL TERMS & CONDITIONS</div>
                <table class="terms-table">
                  <tr>
                    <td class="term-label">Delivery Period</td>
                    <td>: 3 to 4 weeks from the date of technically and commercially clear order.</td>
                  </tr>
                  <tr>
                    <td class="term-label">Installation Period</td>
                    <td>: 2 to 3 weeks</td>
                  </tr>
                  <tr>
                    <td class="term-label">Transportation</td>
                    <td>: Extra at Actual</td>
                  </tr>
                  <tr>
                    <td class="term-label">Payment Terms</td>
                    <td>
                      : Supply/Installation Terms<br>
                      a) 30% Advance along with Purchase order<br>
                      b) 65% Against proforma invoice prior to dispatch<br>
                      c) 5% after successfull Installation and commissioning
                    </td>
                  </tr>
                  <tr>
                    <td class="term-label">Warranty</td>
                    <td>: Offer a standard warranty of 15 months from date of dispatch or 12 months from date of satisfactory installation whichever is earlier</td>
                  </tr>
                  <tr>
                    <td class="term-label">Validity</td>
                    <td>: Our Offer shall remain valid for 15 days</td>
                  </tr>
                  <tr>
                    <td class="term-label">Exclusions</td>
                    <td>: Civil work, MS work, Loading / Unloading at site, Power supply, Adequate lighting arrangement for installation activities, Scrap folding, Scissor lift.</td>
                  </tr>
                </table>
              </div>

              <!-- Footer -->
              <div class="footer-section">
                <p>Best Regards,</p>
                <p><strong>Niraj Khicher</strong></p>
                <p>Mob. No. 7722005969</p>
              </div>

              <!-- Contact Footer -->
              <div class="contact-footer">
                Email: merrakiexpert@gmail.com | Mobile: 8793484326, 9130610101 | www.merrakiexpert.in
              </div>
            </div>
          </body>
        </html>
      `;

      printWindow.document.write(printContent);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
      printWindow.close();
    } catch (error) {
      console.error("Printing failed:", error);
      alert("Failed to print quotation: " + error.message);
    }
  };

  const handleTabChange = (_, newVal) => setTab(newVal);

  const handleMenuClick = (event, quote) => {
    setAnchorEl(event.currentTarget);
    setSelectedQuote(quote);
  };

  const handleCloseMenu = () => {
    setAnchorEl(null);
    setSelectedQuote(null);
  };

  const handleAddQuotation = () => {
    navigator("/add-Quotation");
  };

  const handleSendEmail = () => {
  const subject = encodeURIComponent(`Quotation ${selectedQuote?.quoteNumber}`);
  const body = encodeURIComponent(
    `Hello,\n\nPlease find the quotation details below:\n\n` +
    `Quotation #: ${selectedQuote?.quoteNumber}\n` +
    `Customer: ${selectedQuote?.customer}\n` +
    `Created Date: ${selectedQuote?.createdDate}\n` +
    `Expiry Date: ${selectedQuote?.expiryDate}\n` +
    `Status: ${selectedQuote?.status}\n` +
    `Amount: ${selectedQuote?.amount}\n\n` +
    `Thank you.`
  );
  
  window.location.href = `mailto:?subject=${subject}&body=${body}`;
};

const handleDeleteQuotation = async () => {
  if (!selectedQuote) return;
  if (!window.confirm('Are you sure you want to delete this quotation?')) return;
  try {
    await axios.delete(`http://localhost:5000/api/quotation/${selectedQuote.quotation_id}`);
    setQuotations((prev) => prev.filter(q => q.quotation_id !== selectedQuote.quotation_id));
    setAnchorEl(null);
    setSelectedQuote(null);
  } catch (err) {
    alert('Failed to delete quotation');
  }
};

  return (
    <Box sx={{ display: "flex" }}>
      <Sidebar />

      <Box sx={{ flex: 1, bgcolor: "#f9fafc", minHeight: "100vh" }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
            mt: 1,
            px: 3,
          }}
        >
          <Typography color="text.secondary" fontSize="20px">
            Quatation
          </Typography>

          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Paper
              elevation={0}
              sx={{
                display: "flex",
                alignItems: "center",
                px: 1.5,
                py: 0.5,
                borderRadius: "999px",
                border: "1px solid #e0e0e0",
                bgcolor: "#f9fafb",
                width: 240,
              }}
            >
              <SearchIcon sx={{ fontSize: 20, color: "#999" }} />
              <InputBase
                placeholder="Search anything here..."
                sx={{ ml: 1, fontSize: 14, flex: 1 }}
                inputProps={{ "aria-label": "search" }}
              />
            </Paper>

            <IconButton
              sx={{
                borderRadius: "12px",
                border: "1px solid #e0e0e0",
                bgcolor: "#f9fafb",
                p: 1,
              }}
            >
              <NotificationsNoneIcon sx={{ fontSize: 20, color: "#666" }} />
            </IconButton>
            <Box display="flex" alignItems="center" gap={1}>
              <UserMenu />
            </Box>
          </Box>
        </Box>
        <Box sx={{ px: 2, py: 2 }}>
          <Paper sx={{ p: 1, borderRadius: 2 }}>
            <Box
              sx={{
                display: "flex",
                px: 4,
                py: 2,
                justifyContent: "space-between",
                borderBottom: "1px solid #e0e0e0",
              }}
            >
              <Typography variant="h6" fontWeight={600}>
                Products & Services
              </Typography>
              <Button
                sx={{ backgroundColor: "#003366" }}
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleAddQuotation}
              >
                New Quotation
              </Button>
            </Box>
            <Box py={3} px={4} flex={1}>
              <Grid
                container
                justifyContent="space-between"
                alignItems="center"
                mb={2}
              >
                <Tabs
                  value={tab}
                  onChange={handleTabChange}
                  sx={{
                    "& .MuiTab-root": {
                      textTransform: "none",
                      bgcolor: "#f1f1f1",
                      borderRadius: 2,
                      mr: 1,
                      textDecoration: "none",
                    },
                    "& .Mui-selected": {
                      bgcolor: "#004085",
                      color: "white !important",
                      textDecoration: "none",
                    },
                    "& .MuiTabs-indicator": {
                      display: "none",
                    },
                  }}
                >
                  <Tab label="All Quotation" />
                  <Tab label="Sent Quotation" />
                  <Tab label="Draft Quotation" />
                </Tabs>
                <Box mb={2} maxWidth={350}>
                  <TextField
                    fullWidth
                    placeholder="Search by quotation no, customer name..."
                    size="small"
                  />
                </Box>
              </Grid>

              <Table sx={{ bgcolor: "#fff", borderRadius: 2 }}>
                <TableHead>
                  <TableRow sx={{ bgcolor: "#f5f6fa" }}>
                    <TableCell>
                      <Checkbox />
                    </TableCell>
                    <TableCell>Quotation#</TableCell>
                    <TableCell>Customer Name</TableCell>
                    <TableCell>Created Date</TableCell>
                    <TableCell>Expiry Date</TableCell>
                    <TableCell>Status</TableCell>
                    <TableCell>Bill Amount</TableCell>
                    <TableCell align="center">Action</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {loading ? (
                    <TableRow><TableCell colSpan={8}>Loading...</TableCell></TableRow>
                  ) : error ? (
                    <TableRow><TableCell colSpan={8}>{error}</TableCell></TableRow>
                  ) : (
                    quotations
                      .filter((q) => {
                        if (tab === 1) return q.status === "Sent";
                        if (tab === 2) return q.status === "Draft";
                        return true;
                      })
                      .map((q) => (
                        <TableRow key={q.quotation_id} hover>
                          <TableCell>
                            <Checkbox />
                          </TableCell>
                          <TableCell sx={{ color: "#007bff", fontWeight: 500 }}>
                            {q.quote_number}
                          </TableCell>
                          <TableCell>{q.customer_name}</TableCell>
                          <TableCell>{q.quotation_date}</TableCell>
                          <TableCell>{q.expiry_date}</TableCell>
                          <TableCell>
                            <Chip
                              label={q.status || 'Draft'}
                              size="small"
                              color={q.status === "Sent" ? "success" : "default"}
                              variant="outlined"
                            />
                          </TableCell>
                          <TableCell>{q.grand_total ? `₹${q.grand_total}` : ''}</TableCell>
                          <TableCell align="center">
                            <IconButton onClick={(e) => handleMenuClick(e, q)}>
                              <MoreVertIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))
                  )}
                </TableBody>
              </Table>

              <Box mt={3} display="flex" justifyContent="space-between">
                <Typography variant="body2">
                  Showing 1 to 15 of 100 entries
                </Typography>
                <Box display="flex" justifyContent="space-between">
                  <Pagination
                    count={5}
                    page={1}
                    sx={{
                      "& .MuiPaginationItem-root": {
                        color: "grey",
                        borderColor: "#004085",
                      },
                      "& .Mui-selected": {
                        backgroundColor: "#004085",
                        color: "#fff",
                        "&:hover": {
                          backgroundColor: "#003366",
                        },
                      },
                    }}
                  />
                </Box>
              </Box>

              <Menu
                anchorEl={anchorEl}
                open={Boolean(anchorEl)}
                onClose={handleCloseMenu}
              >
                <MenuItem
                  onClick={() => {
                    navigator(`/editQuotation/${selectedQuote?.quotation_id}`);
                    handleCloseMenu();
                  }}
                >Edit</MenuItem>
                <MenuItem
                  onClick={() => {
                    handleDownloadPdf();
                    handleCloseMenu();
                  }}
                >
                  Download the PDF
                </MenuItem>
                <MenuItem
                  onClick={() => {
                    if (!selectedQuote) {
                      alert('Please select a quotation to print');
                      return;
                    }
                    handlePrintQuotation(selectedQuote.quotation_id);
                    handleCloseMenu();
                  }}
                >
                  Print Quotation
                </MenuItem>
                <MenuItem onClick={() => { handleSendEmail(); handleCloseMenu(); }}>Send Email</MenuItem>
                <MenuItem
                  onClick={async () => {
                    if (!selectedQuote) return;
                    const newStatus = selectedQuote.status === 'Sent' ? 'Draft' : 'Sent';
                    try {
                      await axios.put(`http://localhost:5000/api/quotation/${selectedQuote.quotation_id}`, { status: newStatus });
                      setQuotations(prev => prev.map(q => q.quotation_id === selectedQuote.quotation_id ? { ...q, status: newStatus } : q));
                    } catch (err) {
                      alert('Failed to update status');
                    }
                    handleCloseMenu();
                  }}
                  style={{ color: selectedQuote?.status === 'Sent' ? '#1976d2' : '#388e3c' }}
                >
                  {selectedQuote?.status === 'Sent' ? 'Mark as Draft' : 'Mark as Sent'}
                </MenuItem>
                <MenuItem onClick={handleDeleteQuotation} style={{ color: 'red' }}>Delete</MenuItem>
              </Menu>
            </Box>
          </Paper>
        </Box>
      </Box>
    </Box>
  );
}
