import React, { useState } from "react";
import {
  Box,
  Typography,
  Button,
  Grid,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  Tabs,
  Tab,
  IconButton,
  Menu,
  MenuItem,
  Chip,
  Pagination,
  Checkbox,
  TextField,
  Avatar,
  Paper,
  InputBase,
} from "@mui/material";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import Sidebar from "./Sidebar";
import AddIcon from "@mui/icons-material/Add";
import ArrowDropDownIcon from "@mui/icons-material/ArrowDropDown";
import { useNavigate } from "react-router-dom";
import SearchIcon from "@mui/icons-material/Search";
import NotificationsNoneIcon from "@mui/icons-material/NotificationsNone";
import jsPDF from "jspdf";
import autoTable from 'jspdf-autotable';
import axios from 'axios';


export default function QuotationListPage() {
  const navigator = useNavigate();
  const [tab, setTab] = useState(0);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedQuote, setSelectedQuote] = useState(null);
  const [quotations, setQuotations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  React.useEffect(() => {
    const fetchQuotations = async () => {
      setLoading(true);
      setError('');
      try {
        const res = await axios.get('http://localhost:5000/api/quotation');
        setQuotations(res.data);
      } catch (err) {
        setError('Failed to fetch quotations');
      } finally {
        setLoading(false);
      }
    };
    fetchQuotations();
  }, []);

  
const handleDownloadPdf = async () => {
  if (!selectedQuote) return;
  try {
    const res = await axios.get(`http://localhost:5000/api/quotation/${selectedQuote.quotation_id}`);
    const { quotation, items, sub_total, cgst, sgst, grand_total } = res.data;
    const doc = new jsPDF();
    // Company logo (placeholder)
    const logoUrl = 'https://via.placeholder.com/80x40?text=LOGO';
    const img = new Image();
    img.src = logoUrl;
    // Draw logo (async)
    await new Promise(resolve => { img.onload = resolve; });
    doc.addImage(img, 'PNG', 20, 10, 40, 20);
    // Company info
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Your Company Name', 105, 18, null, null, 'center');
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('123 Main Street, City, Country', 105, 24, null, null, 'center');
    doc.text('Phone: +91-1234567890 | Email: info@company.com', 105, 29, null, null, 'center');
    // Quotation header
    let y = 38;
    doc.setFontSize(13);
    doc.setFont('helvetica', 'bold');
    doc.text('QUOTATION', 105, y, null, null, 'center');
    y += 6;
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Quotation #: ${quotation.quote_number || ''}`, 20, y);
    doc.text(`Date: ${quotation.quotation_date || ''}`, 150, y);
    y += 6;
    doc.text(`Expiry: ${quotation.expiry_date || ''}`, 20, y);
    doc.text(`Status: ${quotation.status || ''}`, 150, y);
    y += 8;
    doc.setFont('helvetica', 'bold');
    doc.text('Bill To:', 20, y);
    doc.setFont('helvetica', 'normal');
    doc.text(quotation.customer_name || '', 40, y);
    y += 8;
    // Items Table
    autoTable(doc, {
      startY: y,
      head: [["Item", "Qty", "Rate", "Discount", "Amount"]],
      body: items.map(item => [
        item.item_detail || '',
        item.quantity || '',
        item.rate || '',
        item.discount || '',
        item.amount || ''
      ]),
      theme: 'grid',
      headStyles: { fillColor: [0, 51, 102], textColor: 255, fontStyle: 'bold', halign: 'center' },
      bodyStyles: { halign: 'right' },
      columnStyles: {
        0: { halign: 'left' },
        1: { halign: 'right' },
        2: { halign: 'right' },
        3: { halign: 'right' },
        4: { halign: 'right' },
      },
      styles: { fontSize: 10 },
      margin: { left: 20, right: 20 },
    });
    let finalY = doc.lastAutoTable.finalY + 6;
    // Totals
    doc.setFont('helvetica', 'bold');
    doc.text(`Sub Total: ₹${sub_total || 0}`, 150, finalY);
    finalY += 6;
    doc.text(`CGST (9%): ₹${cgst || 0}`, 150, finalY);
    finalY += 6;
    doc.text(`SGST (9%): ₹${sgst || 0}`, 150, finalY);
    finalY += 6;
    doc.text(`Grand Total: ₹${grand_total || 0}`, 150, finalY);
    // Footer
    doc.setFontSize(9);
    doc.setFont('helvetica', 'italic');
    doc.text('Generated by ERP Software', 105, 285, null, null, 'center');
    doc.save(`${quotation.quote_number || 'quotation'}.pdf`);
  } catch (err) {
    alert('Failed to generate PDF');
  }
};


const handlePrintQuotation = () => {
  const printWindow = window.open("", "_blank");
  printWindow.document.write(`
    <html>
      <head>
        <title>Quotation Print</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            margin: 40px;
          }
          h1 {
            text-align: center;
            color: #003366;
          }
          .quotation-details {
            margin-top: 30px;
          }
          .quotation-details p {
            font-size: 16px;
            margin: 10px 0;
          }
          .label {
            font-weight: bold;
            color: #333;
          }
          .footer {
            margin-top: 50px;
            text-align: center;
            font-size: 12px;
            color: #666;
          }
        </style>
      </head>
      <body>
        <h1>Quotation Document</h1>
        <div class="quotation-details">
          <p><span class="label">Quotation #:</span> ${selectedQuote?.quoteNumber}</p>
          <p><span class="label">Customer:</span> ${selectedQuote?.customer}</p>
          <p><span class="label">Created Date:</span> ${selectedQuote?.createdDate}</p>
          <p><span class="label">Expiry Date:</span> ${selectedQuote?.expiryDate}</p>
          <p><span class="label">Status:</span> ${selectedQuote?.status}</p>
          <p><span class="label">Amount:</span> ${selectedQuote?.amount}</p>
        </div>
        <div class="footer">
          Generated by ERP Software
        </div>
      </body>
    </html>
  `);
  printWindow.document.close();
  printWindow.print();
};

  const handleTabChange = (_, newVal) => setTab(newVal);

  const handleMenuClick = (event, quote) => {
    setAnchorEl(event.currentTarget);
    setSelectedQuote(quote);
  };

  const handleCloseMenu = () => {
    setAnchorEl(null);
    setSelectedQuote(null);
  };

  const handleAddQuotation = () => {
    navigator("/add-Quotation");
  };

  const handleSendEmail = () => {
  const subject = encodeURIComponent(`Quotation ${selectedQuote?.quoteNumber}`);
  const body = encodeURIComponent(
    `Hello,\n\nPlease find the quotation details below:\n\n` +
    `Quotation #: ${selectedQuote?.quoteNumber}\n` +
    `Customer: ${selectedQuote?.customer}\n` +
    `Created Date: ${selectedQuote?.createdDate}\n` +
    `Expiry Date: ${selectedQuote?.expiryDate}\n` +
    `Status: ${selectedQuote?.status}\n` +
    `Amount: ${selectedQuote?.amount}\n\n` +
    `Thank you.`
  );
  
  window.location.href = `mailto:?subject=${subject}&body=${body}`;
};

const handleDeleteQuotation = async () => {
  if (!selectedQuote) return;
  if (!window.confirm('Are you sure you want to delete this quotation?')) return;
  try {
    await axios.delete(`http://localhost:5000/api/quotation/${selectedQuote.quotation_id}`);
    setQuotations((prev) => prev.filter(q => q.quotation_id !== selectedQuote.quotation_id));
    setAnchorEl(null);
    setSelectedQuote(null);
  } catch (err) {
    alert('Failed to delete quotation');
  }
};

  return (
    <Box sx={{ display: "flex" }}>
      <Sidebar />

      <Box sx={{ flex: 1, bgcolor: "#f9fafc", minHeight: "100vh" }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 3,
            mt: 1,
            px: 3,
          }}
        >
          <Typography color="text.secondary" fontSize="20px">
            Quatation
          </Typography>

          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Paper
              elevation={0}
              sx={{
                display: "flex",
                alignItems: "center",
                px: 1.5,
                py: 0.5,
                borderRadius: "999px",
                border: "1px solid #e0e0e0",
                bgcolor: "#f9fafb",
                width: 240,
              }}
            >
              <SearchIcon sx={{ fontSize: 20, color: "#999" }} />
              <InputBase
                placeholder="Search anything here..."
                sx={{ ml: 1, fontSize: 14, flex: 1 }}
                inputProps={{ "aria-label": "search" }}
              />
            </Paper>

            <IconButton
              sx={{
                borderRadius: "12px",
                border: "1px solid #e0e0e0",
                bgcolor: "#f9fafb",
                p: 1,
              }}
            >
              <NotificationsNoneIcon sx={{ fontSize: 20, color: "#666" }} />
            </IconButton>
            <Box display="flex" alignItems="center" gap={1}>
              <Avatar src="https://i.pravatar.cc/150?img=1" />
              <Typography fontSize={14}>Admin name</Typography>
              <ArrowDropDownIcon />
            </Box>
          </Box>
        </Box>
        <Box sx={{ px: 2, py: 2 }}>
          <Paper sx={{ p: 1, borderRadius: 2 }}>
            <Box
              sx={{
                display: "flex",
                px: 4,
                py: 2,
                justifyContent: "space-between",
                borderBottom: "1px solid #e0e0e0",
              }}
            >
              <Typography variant="h6" fontWeight={600}>
                Products & Services
              </Typography>
              <Button
                sx={{ backgroundColor: "#003366" }}
                variant="contained"
                startIcon={<AddIcon />}
                onClick={handleAddQuotation}
              >
                New Quotation
              </Button>
            </Box>
            <Box py={3} px={4} flex={1}>
              <Grid
                container
                justifyContent="space-between"
                alignItems="center"
                mb={2}
              >
                <Tabs
                  value={tab}
                  onChange={handleTabChange}
                  sx={{
                    "& .MuiTab-root": {
                      textTransform: "none",
                      bgcolor: "#f1f1f1",
                      borderRadius: 2,
                      mr: 1,
                      textDecoration: "none",
                    },
                    "& .Mui-selected": {
                      bgcolor: "#004085",
                      color: "white !important",
                      textDecoration: "none",
                    },
                    "& .MuiTabs-indicator": {
                      display: "none",
                    },
                  }}
                >
                  <Tab label="All Quotation" />
                  <Tab label="Sent Quotation" />
                  <Tab label="Draft Quotation" />
                </Tabs>
                <Box mb={2} maxWidth={350}>
                  <TextField
                    fullWidth
                    placeholder="Search by quotation no, customer name..."
                    size="small"
                  />
                </Box>
              </Grid>

              <Table sx={{ bgcolor: "#fff", borderRadius: 2 }}>
                <TableHead>
                  <TableRow sx={{ bgcolor: "#f5f6fa" }}>
                    <TableCell>
                      <Checkbox />
                    </TableCell>
                    <TableCell>Quotation#</TableCell>
                    <TableCell>Customer Name</TableCell>
                    <TableCell>Created Date</TableCell>
                    <TableCell>Expiry Date</TableCell>
                    <TableCell>Status</TableCell>
                    <TableCell>Bill Amount</TableCell>
                    <TableCell align="center">Action</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {loading ? (
                    <TableRow><TableCell colSpan={8}>Loading...</TableCell></TableRow>
                  ) : error ? (
                    <TableRow><TableCell colSpan={8}>{error}</TableCell></TableRow>
                  ) : (
                    quotations
                      .filter((q) => {
                        if (tab === 1) return q.status === "Sent";
                        if (tab === 2) return q.status === "Draft";
                        return true;
                      })
                      .map((q) => (
                        <TableRow key={q.quotation_id} hover>
                          <TableCell>
                            <Checkbox />
                          </TableCell>
                          <TableCell sx={{ color: "#007bff", fontWeight: 500 }}>
                            {q.quotation_id}
                          </TableCell>
                          <TableCell>{q.customer_name}</TableCell>
                          <TableCell>{q.quotation_date}</TableCell>
                          <TableCell>{q.expiry_date}</TableCell>
                          <TableCell>
                            <Chip
                              label={q.status || 'Draft'}
                              size="small"
                              color={q.status === "Sent" ? "success" : "default"}
                              variant="outlined"
                            />
                          </TableCell>
                          <TableCell>{q.grand_total ? `₹${q.grand_total}` : ''}</TableCell>
                          <TableCell align="center">
                            <IconButton onClick={(e) => handleMenuClick(e, q)}>
                              <MoreVertIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))
                  )}
                </TableBody>
              </Table>

              <Box mt={3} display="flex" justifyContent="space-between">
                <Typography variant="body2">
                  Showing 1 to 15 of 100 entries
                </Typography>
                <Box display="flex" justifyContent="space-between">
                  <Pagination
                    count={5}
                    page={1}
                    sx={{
                      "& .MuiPaginationItem-root": {
                        color: "grey",
                        borderColor: "#004085",
                      },
                      "& .Mui-selected": {
                        backgroundColor: "#004085",
                        color: "#fff",
                        "&:hover": {
                          backgroundColor: "#003366",
                        },
                      },
                    }}
                  />
                </Box>
              </Box>

              <Menu
                anchorEl={anchorEl}
                open={Boolean(anchorEl)}
                onClose={handleCloseMenu}
              >
                <MenuItem
                  onClick={() => {
                    navigator(`/editQuotation/${selectedQuote?.quotation_id}`);
                    handleCloseMenu();
                  }}
                >Edit</MenuItem>
                <MenuItem
                  onClick={() => {
                    handleDownloadPdf();
                    handleCloseMenu();
                  }}
                >
                  Download the PDF
                </MenuItem>
                <MenuItem
                  onClick={() => {
                    handlePrintQuotation();
                    handleCloseMenu();
                  }}
                >
                  Print Quotation
                </MenuItem>
                <MenuItem onClick={() => { handleSendEmail(); handleCloseMenu(); }}>Send Email</MenuItem>
                <MenuItem
                  onClick={async () => {
                    if (!selectedQuote) return;
                    const newStatus = selectedQuote.status === 'Sent' ? 'Draft' : 'Sent';
                    try {
                      await axios.put(`http://localhost:5000/api/quotation/${selectedQuote.quotation_id}`, { status: newStatus });
                      setQuotations(prev => prev.map(q => q.quotation_id === selectedQuote.quotation_id ? { ...q, status: newStatus } : q));
                    } catch (err) {
                      alert('Failed to update status');
                    }
                    handleCloseMenu();
                  }}
                  style={{ color: selectedQuote?.status === 'Sent' ? '#1976d2' : '#388e3c' }}
                >
                  {selectedQuote?.status === 'Sent' ? 'Mark as Draft' : 'Mark as Sent'}
                </MenuItem>
                <MenuItem onClick={handleDeleteQuotation} style={{ color: 'red' }}>Delete</MenuItem>
              </Menu>
            </Box>
          </Paper>
        </Box>
      </Box>
    </Box>
  );
}
